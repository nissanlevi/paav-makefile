# Directory and flag configuration file for new CAD makefile


# To compile and link with Parasoft's Insure++, uncomment the following line
#INSURE = dummy

# Executable files for standard compilers

ifeq ($(ARCH_SUFFIX), L)
   EGCS_VERSION := /pkg/gnu-gcc-/4.1.2/i686-linux
#   EGCS_VERSION := /pkg/gnu-gcc-/4.1.2/x86_64-linux
else
   EGCS_VERSION := /usr/local/egcs/2.95.3-12_02
#   EGCS_VERSION := /_TOOLS_/dist/gnu-gcc-4.1.1/sparc-sun-solaris2.8
endif

EGCS_VERSION := /usr
INCLUDE_DIR := include

ifeq ($(CRG_TESTING), TRUE)
CC := $(EGCS_VERSION)/bin/g++
else
CC := $(EGCS_VERSION)/bin/gcc
endif

CXX := $(EGCS_VERSION)/bin/g++

ifeq ($(ARCH_SUFFIX), L)
YACC = /usr/local/gnu/bison/1.27/bin/bison
else
YACC = bison
endif
LEX = flex

# Flags for compilation with Gnu compiler
GCC_FLAGS	= -Wall -fPIC
ifeq ($(CRG_DEVELOP), TRUE)
  GCC_FLAGS  := $(GCC_FLAGS) -DCRG_DEVELOP
endif
ifeq ($(CRG_TESTING), TRUE)
  GCC_FLAGS  := $(GCC_FLAGS) -DTESTING
endif
ifeq ($(ARCH_SUFFIX), S)
  GCC_FLAGS  := $(GCC_FLAGS) -DSOLARIS
endif




# User-added special flags for the C or C++ compiler
EXTRA_CFLAGS    =
EXTRA_CXXFLAGS  =

# User-added special flags for the linker
# LDFLAGS are inserted after the linker command name before the libraries;
# LIBFLAGS at the end of the command line after the libraries
EXTRA_LDFLAGS   =
EXTRA_LIBFLAGS  =

ifeq ($(WORK_ON_TEMP), TRUE)
EXTRA_CXXFLAGS  := $(EXTRA_CXXFLAGS) -I/tmp/misc/include
EXTRA_LDFLAGS   := $(EXTRA_LDFLAGS) -L/tmp/misc/libL_64_411
endif

# Flag for compilation with debugging (OPT_FLAG_g) and optimization (OPT_FLAG)
OPT_FLAG_g	= -g 
OPT_FLAG	= -O2

# Program for linking shared libraries
SHLIB_LD        = ld

# Flags for linking shared libraries 
SHLIB_LDFLAGS   = -G
SHLIB_LIBFLAGS  =	

# Object files: File extensions for debugging and optimized
OBJ_EXT_g      = _g.o
OBJ_EXT        = .o

# Library files: File extensions for debugging and optimized 
LIB_EXT_g      = _g.a
LIB_EXT        = .a

# Shared library files: File extensions for debugging and optimized 
SHLIB_EXT_g     = _g.so
SHLIB_EXT       = .so


# Extensions for files created by yacc / lex
# Can be .c or .cc depending on whether C or C++ will be generated
YOUT_EXT  = .cc
LOUT_EXT  = .cc


# Flags for yacc/bison parser generator
# -d prepares the y.tab.h parser header file 
# -v generates a y.output file with all parse states
# -t defines the YYDEBUG macro, so debugging facilities are compiled
#
YFLAGS      = -d -y

# Flags for lex/flex lexical scanner generator
# -l tells flex to be lex-compatible
#
LFLAGS      = -l

# Subdirectory names for various types of files
# BUILD_SUFFIX is an architecture-dependent directory suffix;
# if it's not environment-defined, define it here too!
BUILD_SUFFIX = $(ARCH_SUFFIX)


BIN        = bin$(BUILD_SUFFIX)
OBJ_64     = obj$(BUILD_SUFFIX)_64_412
LIB_64     = lib$(BUILD_SUFFIX)_64_412
INCLUDE    = include
C_DIR      = c
OBJ        = obj$(BUILD_SUFFIX)_412
LIB        = lib$(BUILD_SUFFIX)_412
STRIP_BIN  = strip_$(BIN)
DOC_DIR    = doc
MAN_DIR    = man
UGLI_DIR   = ugli
TEST_DIR   = test
DEPEND_DIR = $(C_DIR)/_makedepend

ifeq ($(WORK_ON_TEMP), TRUE)
BIN        := /tmp/crg/bin$(ARCH_SUFFIX)
OBJ_64     := /tmp/crg/obj$(ARCH_SUFFIX)_64_412
LIB_64     := /tmp/crg/lib$(ARCH_SUFFIX)_64_412
OBJ        := /tmp/crg/obj$(ARCH_SUFFIX)_412
LIB        := /tmp/crg/lib$(ARCH_SUFFIX)_412
INCLUDE    := /tmp/crg/include
C_DIR      := /tmp/crg/c
endif


# CAD system directories
CAD_DIR     := /proj/caddev/projects
CADMAKE_DIR := $(CAD_DIR)/cadenv/.release/demo

# Standard generic CAD makefile
#CADMAKEFILE := $(CADMAKE_DIR)/GNUmakefile.cad
CADMAKEFILE := ./GNUmakefile.cad
ALLMAKEFILES := $(MAKE_FILES) $(CADMAKEFILE)

# vpath tells gnu make in which directory to look for each type of file
vpath %.h  		$(INCLUDE)
vpath %.c  		$(C_DIR)
vpath %.cc 		$(C_DIR)
vpath %.y  		$(C_DIR)
vpath %.l  		$(C_DIR)
vpath %$(OBJ_EXT_g) 	$(OBJ)
vpath %$(OBJ_EXT) 	$(OBJ)

# Names of compilers which refer to gcc
GCC_NAMES = gcc g++

# To "wrap" the compile or link commands with another program (such
# as purify), define one or more of the variables below.
#
# The wrapper command will be prefixed to the compilation/link command.
#
# The compilation wrapper command is called COMPILEWRAP;
# the linker wrapper command is called LINKWRAP;
# the linker wrapper command for shared library creation is called SHLIBWRAP.
#
# To compile with purify, uncomment the following line
#LINKWRAP = /usr/local/bin/purify -cache-dir=/tmp
#
# To compile with quantify, uncomment the following line
#LINKWRAP = /usr/local/pure/quantify/quantify -cache-dir=/tmp
#
#LINKWRAP =
#COMPILEWRAP =
#SHLIBWRAP =

#LINKWRAP = /usr/local/pure/releases/DeveloperTools.2002a.06.00.Proto.0038/sun4_solaris2/bin/purify -chain-length="24" -cache-dir=/tmp 

ifeq ($(CWPPC), 1)
  export LM_LICENSE_FILE := 1750@luge-b
  BUILD_SUFFIX :=  PPC32
  BUILD_BIN_SUFFIX := $(BUILD_SUFFIX)
  CWBASE   := /usr/local/metrowerks/CW_EPPC_8.8_Build_80229/CodeWarriorIDE/CodeWarrior
  TOOL     := $(CWBASE)/PowerPC_EABI_Tools/Command_Line_Tools
  CC       := $(TOOL)/mwcceppc
  CXX      := $(TOOL)/mwcceppc
  # prepend compiler path to PATH environment
  PATH    :=  $(TOOL):$(PATH)
  CPUOPTS :=   -big  -proc generic -use_lmw_stmw off -strict_ieee -fp soft -vector off -O0 -Op
  PPCEABI := $(CWBASE)/PowerPC_EABI_Support
  INC := -i- -ir $(PPCEABI)/Documentation -ir $(PPCEABI)/Initialization_Files -ir $(PPCEABI)/Runtime -ir $(PPCEABI)/MSL/MSL_C -ir $(PPCEABI)/MSL/MSL_C++ -ir $(PPCEABI) -ir $(PPCEABI)/SystemCallSupport 
#-prefix "$(PWD)/__pp_prefix_"
  EXTRA_CFLAGS := $(CPUOPTS) -ipa off -msgstyle gcc -progress -heapsize 256 -stacksize 32 -abi eabi -sdatathreshold 8 -model absolute -sdata 8 -sdata2 8  -pool off -common off -align powerpc -func_align 4 -opt nopeephole -schedule off  -novolatileasm -gdwarf-2 -sym dwarf-2,full -nodefaults -for_scoping off -trigraphs off -stdkeywords off -enum int -strict off -wchar_t on -Cpp_exceptions on -strings reuse -strings nopool -inline on -RTTI on  -char unsigned -inline noauto -bool on -instance_manager off -gcc_extensions on -inline bottomup -ppopt pragma -ppopt break -requireprotos $(INC)
  EXTRA_CXXFLAGS := $(EXTRA_CFLAGS) -dialect c++
  GCC_DEPENDOPT :=
  OPT_FLAG_g := 
  rocoo_OFILES := $(rocoo_common_lib_ofiles)
  DEFINES+= CODEWARRIOR PPC 
  GCC_FLAGS :=
  OBJ        = obj$(BUILD_SUFFIX)
  LIB        = lib$(BUILD_SUFFIX)
endif
ifeq ($(CWSC), 1)
  BUILD_SUFFIX :=  SC3850
  BUILD_BIN_SUFFIX := $(BUILD_SUFFIX)
#For local access all licenses are under: /home/swproj/sw/license/license.dat
  export LM_LICENSE_FILE := 1700@vlicsrv7
  export SCTOOLS_HOME := /run/pkg/fs-codewarrior-/starcore-23.11.1.31.3x50
  export SC100_HOME := /run/pkg/fs-codewarrior-/starcore-23.11.1.31.3x50
  CC := $(SCTOOLS_HOME)/bin/scc
  CXX := $(SCTOOLS_HOME)/bin/scc
  CPUOPTS :=   -arch sc3850 -be -mh -slld
  INC := #-I $(SCTOOLS_HOME)/ewl/EWL_C/include -I $(SCTOOLS_HOME)/ewl/EWL_C++/include
  EXTRA_CXXFLAGS := $(CPUOPTS) $(INC) -Wnounusedarg -mod -Cpp_exceptions on -Xcfe "-msgstyle parseable"
  EXTRA_CFLAGS := $(EXTRA_CXXFLAGS) -force c99
  GCC_DEPENDOPT :=
  OPT_FLAG_g :=
  rocoo_OFILES := $(rocoo_common_lib_ofiles)
  DEFINES+= CODEWARRIOR STARCORE
  GCC_FLAGS :=
  OBJ        = obj$(BUILD_SUFFIX)
  LIB        = lib$(BUILD_SUFFIX)
endif

#ifeq ($(ARMRVDS), 1)
#  BUILD_SUFFIX :=  ArmA8
#  BUILD_BIN_SUFFIX := $(BUILD_SUFFIX)
#  export LM_LICENSE_FILE := 8224@ravel
#  export ARMROOT := /usr/local/arm/arm31_new1
#  export RVCT31INC := $(ARMROOT)/RVCT/Data/3.1/569/include/unix
#  export RVCT31BIN := $(ARMROOT)/RVCT/Programs/3.1/569/linux-pentium
#  export RVCT31LIB := $(ARMROOT)/RVCT/Data/3.1/569/lib
#  CC := $(RVCT31BIN)/armcc
#  CXX := $(RVCT31BIN)/armcc
#  CPUOPTS := --cpu=Cortex-A8 --fpu=SoftVFP 
#  EXTRA_CXXFLAGS := $(CPUOPTS) --exceptions --debug --diag_suppress=611 --gnu
#  EXTRA_CFLAGS := $(EXTRA_CXXFLAGS)

#  GCC_DEPENDOPT :=
#  OPT_FLAG_g :=
#  rocoo_OFILES := $(rocoo_common_lib_ofiles)
#  DEFINES+= ARM
#  OBJ        := obj$(BUILD_SUFFIX)
#  LIB        := lib$(BUILD_SUFFIX)
#  GCC_FLAGS  :=
#endif

ifeq ($(CWPPC),1)
DEPEND_DIR := $(C_DIR)/_makedependPpc
endif

ifeq ($(CWSC),1)
DEPEND_DIR := $(C_DIR)/_makedependSc
endif

#ifeq ($(ARMRVDS),1)
#DEPEND_DIR := $(C_DIR)/_makedependArm
#endif

#PARALLEL_CMD := bsub -Ip -q priority

